# app.py
import streamlit as st
import requests
from PIL import Image
import io
import base64
import numpy as np
import cv2

st.set_page_config(
    page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤",
    page_icon="üõ∞Ô∏è",
    layout="wide"
)

st.title("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤")

# URL –±—ç–∫–µ–Ω–¥–∞
BACKEND_URL = "https://dpo-segmentation-model.onrender.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –Ω–∞ render.com

def get_image_download_link(img, filename, text):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    href = f'<a href="data:file/png;base64,{img_str}" download="{filename}">{text}</a>'
    return href

st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
patch_size = st.sidebar.slider("–†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞", min_value=128, max_value=512, value=256, step=64)
subdivisions = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π", min_value=2, max_value=4, value=2, step=1)

st.sidebar.markdown("---")
st.sidebar.markdown("""
## –ö–ª–∞—Å—Å—ã
- üü™ –ó–¥–∞–Ω–∏–µ (#3C1098)
- üü£ –ó–µ–º–ª—è (#8429F6)
- üîµ –î–æ—Ä–æ–≥–∞ (#6EC1E4)
- üü° –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (#FEDD3A)
- üü† –í–æ–¥–∞ (#E2A929)
- ‚ö™ –ù–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–π (#9B9B9B)
""")

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–Ω–∏–º–æ–∫...", type=["jpg", "jpeg", "png"])

col1, col2 = st.columns(2)

if uploaded_file is not None:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(uploaded_file)
    col1.header("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    col1.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
    process_button = st.button("–°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    if process_button:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            files = {"file": ("image.jpg", uploaded_file.getvalue(), "image/jpeg")}
            params = {"patch_size": patch_size, "subdivisions": subdivisions}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
            try:
                response = requests.post(f"{BACKEND_URL}/predict/", files=files, params=params)
                response.raise_for_status()
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_image = Image.open(io.BytesIO(response.content))
                col2.header("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
                col2.image(result_image, caption="–ú–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", use_column_width=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.markdown(
                    get_image_download_link(result_image, "segmentation_result.png", "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"),
                    unsafe_allow_html=True
                )
                
            except requests.exceptions.RequestException as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º: {str(e)}")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")

